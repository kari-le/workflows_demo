Skip to main content
Side panel
 
CI/CD
Completion requirements
 Done: View
3. Exercise: GitHub Actions
What You'll Do
This exercise shows how to create a GitHub Actions workflow and view the results from running it.


Instructions 
Prerequisite: Add workflow scope to Personal Access Token

Log into your account at GitHub.
In Week 1, you set up a Personal Access Token for your GitHub account. 
Return to the settings for this token:
Click on your user icon at the upper right of any GitHub page, while logged in.
Choose Settings from the user menu.
From the left sidebar, choose Developer settings, then Personal access tokens.
Click on the token that you created in Week 1.
In the token settings, look to see if the workflow scope is checked. If not, check it. 


Scroll to the bottom and click the Update token button.


Set up remote & local Git repositories 
This part of the exercise will be similar to your first week's first exercise on GitHub. 
You will create a remote GitHub repository online, then you'll set up a local folder on your computer as its local counterpart. 
You will add and commit files locally, then push them to your remote repository. 


Create GitHub repository
To get to the GitHub homepage from any other GitHub page, click the GitHub octocat icon  in the upper left corner. 
From the homepage, click the button to create a new repository:


Give the repository the name workflows_demo

Leave the rest of the repository settings at their default and click the Create repository button at the bottom.
GitHub will take you to a page with a set of instructions on how to create or push a repository. 
Leave this page open.
 
Create local repository
In the course folder on your computer (3-DevOps/), create a new folder named week3.
In this folder, create a subfolder named workflows_demo.
Open the workflows_demo/ folder in VS Code.
Open the VS Code terminal and copy/paste the instructions from the GitHub page you left open earlier, as in the example below (using your own repository URL):


Don't forget to press enter after the final git push line. 
You should then see a message like this:


Next,  in your workflows_demo/  folder, create a new file named helloworld.py and enter the below code into it:
def main():
    print("Hello World!")

if __name__ == "__main__":
    main()
Save the file.
Add and commit the file to the local repository, then push your commit to the remote (GitHub) repository, as shown below:


Refresh the repository's GitHub page in your browser. It should look similar to the below screenshot. 
You can see that the files are pushed under the main branch:




Set up a workflow
From your GitHub repository for workflow_demo, click the Actions menu option at the top:

On the next page, click set up a workflow yourself:


If it does not already exist, GitHub will then create your workflows folder, in a folder named .github.
And it will create a starter workflows YAML file for you and name it main.yml.
Let's rename it test_hello.yml:


GitHub Actions workflow files are always stored in the .github/workflows/ folder.
Replace all the starter code in this file with the following code:
name: Hello Test Python Versions

on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  hello-test-python-versions:
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8']
    runs-on: ubuntu-20.04
    steps:
    
      # Runs a single command using the runners shell, using run:
      - run: echo "Job automatically triggered by event ${{ github.event_name }}."
      
      # Runs a set of commands using the runners shell, using run: |
      - run: |
          echo "Job running on a ${{ runner.os }} server hosted by GitHub."
          echo "On branch ${{ github.ref }} of repository ${{ github.repository }}."
          
      - name: Check out repository code so it can be run by GitHub
        uses: actions/checkout@v3
        
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      
      - name: List files in repository
        run: |
          echo "The contents of the repository are:"
          ls ${{ github.workspace }}

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
      - run: echo "Python has been set up."
       
      - name: Run the Python code in helloworld.py
        run: |
          echo "Running Python code"
          python helloworld.py  
